@startuml
set separator :::

class ProjectLibrary:::Punto{
+ unsigned int _id
+ double _x
+ double _y
+ bool _inserito = false
+ {static} constexpr double geometricTol = 1.0e-12
+ {static} constexpr double geometricTol_Squared
+ Punto(unsigned int& id, double& x, double& y)
+ Punto(const Punto& p)
+ Punto()
+ string Show()
}

class ProjectLibrary:::Lato {
# unsigned int _id
# Punto _p1
# Punto _p2
# double _length
# vector<unsigned int> _listIdTr
# unsigned int _prec = 0
# unsigned int _succ = 0
+ Lato(unsigned int& id , const Punto& p1, const Punto& p2, unsigned int& idtr)
+ Lato(const Lato& lat)
+ Lato()
}

class ProjectLibrary:::Triangolo
{
# unsigned int _id
# array<unsigned int, 3> _vertici
# double CalcolaAngolo(const Lato& segm, vector<Lato>& lst_lat)
+ Triangolo(unsigned int& ident, const unsigned int& p1, const unsigned int& p2, const unsigned int& p3, const unsigned int& l1, const unsigned int& l2, const unsigned int& l3)
+ Triangolo(const Triangolo& triang)
+ Triangolo()       
+ string Show()
}

class ProjectLibrary:::Mesh {
# vector<Triangolo> _listaTriangoli
# vector<Lato> _listaLati
# vector<Punto> _listaPunti
# unsigned int _hullBeginLato
# list<array<unsigned int,2>> _codaDelaunay
# void PrimoTriangolo()
# void ControlloDelaunay()
# void CollegaSenzaIntersezioni(const Punto& p, unsigned int& id_t, unsigned int& id_l)
# bool accettabile(const Punto& pnew, const Punto& v)
# unsigned int DentroMesh(const Punto& p, Posizione& DM)
# void PuntoInterno(const Punto& po, unsigned int& itr, unsigned int& id_tr, unsigned int& id_lt)
# void PuntoBordoTriang(const Punto& po, unsigned int& ilt, unsigned int& id_tr, unsigned int& id_lt)
# void PuntoBordoHull(const Punto& po, unsigned int& ilt, unsigned int& id_tr, unsigned int& id_lt)
+ Mesh(const vector<Punto>& listaPunti)
+ Mesh()
+ string Show()
+ bool ExportMesh(const Mesh& mesh, const string& OutFilePath, const string& OutFileNameParz)
}

Lato "1" --o "1..*" Mesh
Punto "1"--o "1..*" Mesh
Triangolo "1" --o "1..*" Mesh
Lato "3" --o "1..2" Triangolo
Punto "3" --o "1..*" Triangolo
Punto  "2" -left-o "1..*" Lato

enum ProjectLibrary:::Posizione
{
INTERNO = 'I',
LATO_NON_FRONTIERA = 'L'
HULL = 'H'
ESTERNO = 'E'
}

Posizione .right.> Punto
@enduml